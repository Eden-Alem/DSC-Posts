{"version":3,"sources":["components/search/search.component.jsx","components/card/card.component.jsx","assests/data.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","props","className","placeholder","onChange","handlesearch","CardComponent","post","title","key","body","DATA","userId","id","App","event","setState","searchfield","target","value","state","posts","loading","this","fetch","then","response","json","catch","err","console","log","filteredpost","filter","toLowerCase","includes","map","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qSAOeA,G,MAJG,SAACC,GACf,OAAQ,2BAAOC,UAAU,SAASC,YAAaF,EAAME,YAAaC,SAAUH,EAAMI,iBCWvEC,G,MAZO,SAACL,GACnB,OACI,yBAAKC,UAAU,kBACX,4BAAKD,EAAMM,KAAKC,OAChB,4BAAKP,EAAMM,KAAKE,KAChB,2BACGR,EAAMM,KAAKG,SCTbC,EAAO,CAClB,CACEC,OAAQ,EACRC,GAAI,EACJL,MACE,6EACFE,KACE,qKAEJ,CACEE,OAAQ,EACRC,GAAI,EACJL,MAAO,eACPE,KACE,qNAEJ,CACEE,OAAQ,EACRC,GAAI,EACJL,MAAO,8DACPE,KACE,2KAEJ,CACEE,OAAQ,EACRC,GAAI,EACJL,MAAO,uBACPE,KACE,qMAEJ,CACEE,OAAQ,EACRC,GAAI,EACJL,MAAO,qBACPE,KACE,2JCqBSI,G,kBAjDb,WAAYb,GAAO,IAAD,8BAChB,4CAAMA,KAuBRI,aAAe,SAACU,GACd,EAAKC,SAAS,CACZC,YAAYF,EAAMG,OAAOC,SAxB3B,EAAKC,MAAO,CACVC,MAAMV,EACNM,YAAY,GACZK,SAAS,GALK,E,iFAQE,IAAD,OACjBC,KAAKP,SAAS,CACZM,SAAQ,IAEVE,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UAC5EF,MAAK,SAAAJ,GACJ,EAAKL,SAAS,CACZK,QACAC,SAAQ,OAGXM,OAAM,SAAAC,GACLC,QAAQC,IAAIF,Q,+BAUP,IAAD,OACAG,EAAeT,KAAKH,MAAMC,MAAMY,QAAO,SAAC1B,GAC5C,OAAOA,EAAKC,MAAM0B,cAAcC,SAAS,EAAKf,MAAMH,YAAYiB,kBAEnE,OACC,yBAAKhC,UAAU,OACb,yCACA,kBAAC,EAAD,CAAWC,YAAY,cAAcE,aAAckB,KAAKlB,gBAChC,IAAvBkB,KAAKH,MAAME,QAAmB,yBAAKpB,UAAU,aAC3C8B,EAAaI,KAAK,SAAA7B,GACjB,OAAO,kBAAC,EAAD,CAAME,IAAKF,EAAKM,GAAIN,KAAMA,QAE7B,+C,GA3CI8B,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.c699a49e.chunk.js","sourcesContent":["import React from 'react';\nimport './search.style.css';\n\nconst SearchBox = (props) => {\n    return (<input className=\"search\" placeholder={props.placeholder} onChange={props.handlesearch}/>);\n};\n\nexport default SearchBox;","import React from 'react';\nimport './card.style.css';\n\nconst CardComponent = (props) => {\n    return (\n        <div className=\"card-container\">\n            <h2>{props.post.title}</h2>\n            <h2>{props.post.key}</h2>\n            <p>\n              {props.post.body}\n            </p>\n          </div>\n    );\n};\n\nexport default CardComponent;","export const DATA = [\n  {\n    userId: 1,\n    id: 1,\n    title:\n      \"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\",\n    body:\n      \"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\"\n  },\n  {\n    userId: 1,\n    id: 2,\n    title: \"qui est esse\",\n    body:\n      \"est rerum tempore vitae\\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla\"\n  },\n  {\n    userId: 1,\n    id: 3,\n    title: \"ea molestias quasi exercitationem repellat qui ipsa sit aut\",\n    body:\n      \"et iusto sed quo iure\\nvoluptatem occaecati omnis eligendi aut ad\\nvoluptatem doloribus vel accusantium quis pariatur\\nmolestiae porro eius odio et labore et velit aut\"\n  },\n  {\n    userId: 1,\n    id: 4,\n    title: \"eum et est occaecati\",\n    body:\n      \"ullam et saepe reiciendis voluptatem adipisci\\nsit amet autem assumenda provident rerum culpa\\nquis hic commodi nesciunt rem tenetur doloremque ipsam iure\\nquis sunt voluptatem rerum illo velit\"\n  },\n  {\n    userId: 1,\n    id: 5,\n    title: \"nesciunt quas odio\",\n    body:\n      \"repudiandae veniam quaerat sunt sed\\nalias aut fugiat sit autem sed est\\nvoluptatem omnis possimus esse voluptatibus quis\\nest aut tenetur dolor neque\"\n  }\n];\n","import React from 'react';\nimport Searchbox from './components/search/search.component';\nimport Card from  './components/card/card.component';\nimport {DATA} from './assests/data';\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      posts:DATA,\n      searchfield:\"\",\n      loading: false\n    };\n  }\n  componentDidMount(){\n    this.setState({\n      loading:true\n    });\n    fetch(\"https://jsonplaceholder.typicode.com/posts\").then(response=> response.json())\n    .then(posts =>{\n      this.setState({\n        posts,\n        loading:false\n      });\n    })\n    .catch(err=>{\n      console.log(err);\n    });\n  }\n\n  handlesearch = (event)=>{\n    this.setState({\n      searchfield:event.target.value\n    })\n  }\n  \n  render(){\n    const filteredpost = this.state.posts.filter((post)=>{\n      return post.title.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    })\n   return(\n    <div className=\"App\">\n      <h1>DSC Posts</h1>\n      <Searchbox placeholder=\"search here\" handlesearch={this.handlesearch}></Searchbox>\n      {this.state.loading === false?(<div className=\"card-list\">\n        {filteredpost.map((post =>{\n          return <Card key={post.id} post={post}/>\n        }))}\n      </div>):<h1>Loading...</h1>}\n      \n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}